import * as fs from "fs";
import * as path from "path";

const cssFile = path.resolve(__dirname, "../global.css");
const tsOutputFile = path.resolve(__dirname, "../constants/colors.ts");

const css = fs.readFileSync(cssFile, "utf-8");

function extractVars(selector: string): Record<string, string> {
	const regex = new RegExp(`${selector}\\s*\\{([\\s\\S]*?)\\}`, "gm");
	const match = regex.exec(css);
	if (!match) return {};

	const varBlock = match[1];
	const vars: Record<string, string> = {};

	varBlock.split(";").forEach((line) => {
		const [key, value] = line.split(":").map((part) => part?.trim());
		if (key?.startsWith("--") && value) {
			const name = key.replace(/^--/, "");
			const [h, s, l] = value.split(/\s+/).map((x) => x.trim());
			vars[name] = `hsl(${h}, ${s}, ${l})`;
		}
	});
	return vars;
}

function buildColorObject(vars: Record<string, string>) {
	return {
		background: vars.background,
		foreground: vars.foreground,
		card: vars.card,
		cardForeground: vars["card-foreground"],
		popover: vars.popover,
		popoverForeground: vars["popover-foreground"],
		primary: vars.primary,
		primaryForeground: vars["primary-foreground"],
		secondary: vars.secondary,
		secondaryForeground: vars["secondary-foreground"],
		muted: vars.muted,
		mutedForeground: vars["muted-foreground"],
		accent: vars.accent,
		accentForeground: vars["accent-foreground"],
		destructive: vars.destructive,
		destructiveForeground: vars["destructive-foreground"],
		border: vars.border,
		input: vars.input,
		ring: vars.ring,
	};
}

const lightVars = extractVars(":root");
const darkVars = extractVars(".dark:root");

const colors = {
	light: buildColorObject(lightVars),
	dark: buildColorObject(darkVars),
};

const tsContent = `// This file is auto-generated by scripts/generateColors.ts
export const colors = ${JSON.stringify(colors, null, 2)} as const;
`;

fs.writeFileSync(tsOutputFile, tsContent, "utf-8");
console.log(`âœ… colors.ts updated`);
